---

# additional disks setup for terraform role
#
#         [ Start ]
#             |
# [ Create disk partitions ]
#     ┌───────┴─────────┐
#     |                 |
#     |           [ Copy file to remote host ]
#     |                 |
#     |           [ Create LUKS container ]
#     |                 |
# [ Format diks]  [ Format encrypted disk ]
#     |                 |
#     └───────┬─────────┘
# [ Create disk mountpoint ]
#     ┌───────┴─────────┐
#     |                 |
# [ Mount disks ] [ Mount encrypted disks ]
#     └───────┬─────────┘
#          [ End ] 

# Filter the additional virtual disks and create 1 partition
# for each disk.
# Es. For each disk you have:
# vdb
# └─vdb1
# vdc
# └─vdc1
- name: Create disk partitions
  parted:
    device: "/dev/{{ item }}"
    number: 1
    state: present
  with_items:
    - "{{ ansible_devices.keys() | select('match','vd[b-z]') | list }}"

# Create directory under /root to store keyfiles that
# are going to be generated.
- name: Create directory to store keyfiles
  file:
    path: /root/keyfiles
    state: directory
    mode: '0600'
  when:
    - "{{ item.0['encryption'] }}"

# Copy the keyfile to the remote host, to allow 
# luks utility to encrypt disks.
- name: Copy keyfile to remote host
  copy:
    src: "{{ item.0['keyfile'] }}"
    dest: "/root/{{ item.0['keyfile'] | basename }}"
    mode: '0400'
  with_together:
    - "{{ data_disks.values() | list }}"
    - "{{ ansible_devices.keys() | select('match','vd[b-z]') | sort | list }}"
  when:
    - "{{ item.0['encryption'] }}"

# For each partition create a luks container
# using the specified keyfile to encrypt it.
- name: Create LUKS container
  luks_device:
    name: "enc{{ item.1 }}1"
    device: "/dev/{{ item.1 }}1"
    state: "opened"
    keyfile: "/root/{{ item.0['keyfile'] | basename }}"
  with_together:
    - "{{ data_disks.values() | list }}"
    - "{{ ansible_devices.keys() | select('match','vd[b-z]') | sort | list }}"
  when:
    - "{{ item.0['encryption'] }}"

# For each partition previously created
# the task format the unique partition with
# the filesystem type specified into the inventory,
# or with the default if not specified.
- name: Format disks
  filesystem:
    dev: "/dev/{{ item.1 }}1"
    fstype: "{{ item.0['format'] }}"
  with_together:
    - "{{ data_disks.values() | list }}"
    - "{{ ansible_devices.keys() | select('match','vd[b-z]') | sort | list }}"
  when:
    - "not {{ item.0['encryption'] }}"

# For each partition previously created
# the task format the unique partition with
# the filesystem type specified into the inventory,
# or with the default if not specified.
- name: Format encrypted disks
  filesystem:
    dev: "/dev/mapper/enc{{ item.1 }}1"
    fstype: "{{ item.0['format'] }}"
  with_together:
    - "{{ data_disks.values() | list }}"
    - "{{ ansible_devices.keys() | select('match','vd[b-z]') | sort | list }}"
  when:
    - "{{ item.0['encryption'] }}"

# Set the facts again after the previous tasks
# to update the informations about created disks.
# This is useful to get the newest partition UUIDs.
- name: Set Facts
  setup:
    gather_subset:
      - hardware

# For each disk, create its related mount point
# if specified into the inventory.
# If not specified, the assert must exit the playbook execution.
- name: Create disks mountpoint
  file:
    path: "{{ item['mount_point'] }}"
    state: directory
  with_items:
    - "{{ data_disks.values() | list }}"

# Mount each disk on the related mountpoint,
# generating the entry into the /etc/fstab file.
- name: Mount disks
  mount:
    path: "{{ item.0['mount_point'] }}"
    src: "UUID={{ ( ansible_devices[item.1].partitions.values() | list )[0].uuid }}"
    fstype: "{{ item.0['format'] }}"
    state: mounted
    opts: nofail
  with_together:
    - "{{ data_disks.values() | list }}"
    - "{{ ansible_devices.keys() | select('match','vd[b-z]') | sort | list }}"
  when:
    - "not {{ item.0['encryption'] }}"

# Mount each disk on the related mountpoint,
# generating the entry into the /etc/fstab file.
- name: Mount encrypted disks
  mount:
    path: "{{ item.0['mount_point'] }}"
    src: "/dev/mapper/enc{{ item.1 }}1"
    fstype: "{{ item.0['format'] }}"
    state: mounted
    opts: nofail
  with_together:
    - "{{ data_disks.values() | list }}"
    - "{{ ansible_devices.keys() | select('match','vd[b-z]') | sort | list }}"
  when:
    - "{{ item.0['encryption'] }}"

    ## Remove the keyfile which contains the passphrase to 
    ## access the disk.
    #- name: Remove keyfiles
    #  file:
    #    path: "/root/{{ item.0['keyfile'] | basename }}"
    #    state: absent
    #  with_together:
    #    - "{{ data_disks.values() | list }}"
    #    - "{{ ansible_devices.keys() | select('match','vd[b-z]') | sort | list }}"
    #  when:
    #    - "{{ item.0['encryption'] }}"
