# Ensure that the mandatory variables for the host are set.
- name: Assert VMs Variables
  assert:
    quiet: yes
    that: "{{ item }} is defined"
    fail_msg: >
      You must specify {{ item }}
  with_items:
      - hostvars['terraform_node']
      - hostvars['terraform_node']['ansible_host']
      - hostvars['terraform_node']['ansible_connection']
      - ansible_host
      - disk_source
      - pool_name
      - ssh_password
      - ssh_port
      - ssh_public_key_file
      - ssh_user
      - network_interfaces

# Verifiy the correctness of the parameters.
- name: Validate 'ssh_port' parameter
  assert:
    quiet: yes
    that:
      - "{{ ssh_port | int }}"
      - ssh_port > 0
    fail_msg: >
      You are trying to use an unsupported ssh_port value.

# Verifiy the correctness of the parameters.
- name: Validate 'ansible_port' parameter
  assert:
    quiet: yes
    that:
      - "{{ hostvars[hypervisor]['ansible_port'] | int }}"
      - "{{ ( hostvars[hypervisor]['ansible_port'] | int ) > 0 }}"
    fail_msg: >
      You are trying to use an unsupported ansible_port value.
  when:
    - hostvars[hypervisor]['ansible_port'] is defined

# Ensure that the os_family variable has been set for current host.
- name: Assert os_family
  assert:
    quiet: yes
    that:
      - "{{ item }}"
    fail_msg: >
      You must specify the os_family for host {{ inventory_hostname }},
      supported values are: {{ os_family_support }}
  with_items:
      - "os_family is defined"
      - "os_family in os_family_support"

# Ensure that the hypervisor variable has been set for current host.
- name: Assert hypervisor variable
  assert:
    quiet: yes
    that:
      - "{{ item }}"
    fail_msg: >
      You must specify the hyperisor value for host {{ inventory_hostname }}
  with_items:
      - "hypervisor is defined"
      - "hostvars[hypervisor]['ansible_host'] is defined"

# Verifiy the correctness of the parameters.
- name: Validate 'cpu' parameter
  assert:
    quiet: yes
    that:
      - "{{ cpu | int }}"
      - cpu > 0
    fail_msg: >
      You are trying to use an unsupported cpu value.
  when:
    - cpu is defined

# Verifiy the correctness of the parameters.
- name: Validate 'memory' parameter
  assert:
    quiet: yes
    that:
      - "{{ memory | int }}"
      - memory > 0
    fail_msg: >
      You are trying to use an unsupported memory value.
  when:
    - memory is defined

# Ensure that the mandatory variables for the host are set.
- name: Assert VMs Network Variables - At least one interface is defined
  assert:
    quiet: yes
    that:
      - "{{ network_interfaces.keys() | list | length }} > 0"
    fail_msg: >
      "Declare at least one interface"

# Ensure that the mandatory variables for the host are set.
- name: Assert VMs Network Variables - NAT should be our first interface
  assert:
    quiet: yes
    that:
      - "{{ network_interfaces.values() | list }}[0].type == 'nat'"
    fail_msg: >
      "First interface declared must be NAT type"

# Ensure that the mandatory variables for the host are set.
- name: Assert VMs Network Variables
  assert:
    quiet: yes
    that:
      - "{{ item }}.name is defined"
      - "{{ item }}.type is defined"
      - "{{ item }}.ip is defined"
      - "{{ item }}.gw is defined"
      - "{{ item }}.dns is defined"
    fail_msg: >
      Incomplete interface declaration for {{ item }}, missing a mandatory var
  with_items:
    - "{{ network_interfaces.values() | list }}"

# Ensure that the mandatory variables for the host are set.
- name: Assert VMs Network Type Variables
  assert:
    quiet: yes
    that:
      - "{{ item }}.type == 'nat' or
        {{ item }}.type == 'macvtap' or
        {{ item }}.type == 'bridge'"
    fail_msg: >
      Unsupported value for interface type.
  with_items:
    - "{{ network_interfaces.values() | list }}"

# Ensure that the mandatory variables for the host are set.
- name: Validate 'ip' parameter
  assert:
    quiet: yes
    that:
      - "{{ item }}.ip | ipaddr"
    fail_msg: >
      Invalid interface ip address.
  when:
    - network_interfaces is defined
  with_items:
    - "{{ network_interfaces.values() | list }}"

# Ensure that the mandatory variables for the host are set.
- name: Validate 'gw' parameter
  assert:
    quiet: yes
    that:
      - "{{ item }}.gw | ipaddr"
    fail_msg: >
      Invalid interface gateway address.
  when:
    - network_interfaces is defined
  with_items:
    - "{{ network_interfaces.values() | list }}"

# Ensure that the mandatory variables for the host are set.
- name: Assert VMs DNS Network Variables
  assert:
    quiet: yes
    that:
      - "{{ item.dns }} | length > 0"
    fail_msg: >
      Incomplete interface dns specification.
  when:
    - "item.dns is defined"
  with_items:
    - "{{ network_interfaces.values() | list }}"

# Include the variables of the os_family of the host.
#
- name: Set os_family vars
  include_vars: "vars/os/family/{{ os_family }}.yml"

# If one (or more) additional disk is defined, we need to ensure that
# all the dependent variables are set in order to work properly.
- name: Assert Additional Disks Varibles
  assert:
    quiet: yes
    that:
      - "{{ item }}.size is defined"
      - "{{ item }}.pool is defined"
      - "{{ item }}.format is defined"
      - "{{ item }}.mount_point is defined"
      - "{{ item }}.encryption is defined"
    fail_msg: >
      You must specify {{ item }} when data_disks is defined
  with_items:
    - "{{ data_disks.values() | list }}"
  when:
    - data_disks is defined
    - data_disks | length > 0

# Verifiy the correctness of the parameters.
- name: Validate 'size' parameter
  assert:
    quiet: yes
    that:
      - "{{ item }}.size | int"
      - "{{ item }}.size > 0"
    fail_msg: >
      You are trying to use an unsupported size value.
  with_items:
    - "{{ data_disks.values() | list }}"
  when:
    - data_disks is defined
    - data_disks | length > 0

# Verifiy the correctness of the parameters.
- name: Validate 'pool' parameter
  assert:
    quiet: yes
    that:
      - "{{ item }}.pool | length > 0"
    fail_msg: >
      You are trying to use an unsupported pool value.
  with_items:
    - "{{ data_disks.values() | list }}"
  when:
    - data_disks is defined
    - data_disks | length > 0

# Verifiy the correctness of the parameters.
- name: Validate 'format' parameter for FreeBSD
  assert:
    quiet: yes
    that:
      - "{{ item }}.format == 'freebsd-ufs'"
      - "{{ item }}.format | length > 0"
    fail_msg: >
      You are trying to use an unsupported fs format.
      Supported formats for FreeBSD: freebsd-ufs
  with_items:
    - "{{ data_disks.values() | list }}"
  when:
    - data_disks is defined
    - data_disks | length > 0
    - os_family == 'FreeBSD'

- name: Assert supported_fs
  assert:
    quiet: yes
    that:
      - "{{ item }}.format in {{ supported_fs }}"
      - "{{ item }}.format | length > 0"
    fail_msg: >
      You must specify a valid disk format for host {{ inventory_hostname }},
      supported values are: {{ supported_fs }}
  when:
      - "supported_fs is defined"
      - "data_disks is defined"
  with_items:
    - "{{ data_disks.values() | list }}"

# Verifiy the correctness of the parameters.
- name: Validate 'mount_point' parameter
  assert:
    quiet: yes
    that:
      - "{{ item }}.mount_point | regex_search('^/\\w+')"
      - "{{ item }}.mount_point | length > 0"
    fail_msg: >
      You are trying to use an unsupported mount_point value.
  with_items:
    - "{{ data_disks.values() | list }}"
  when:
    - data_disks is defined
    - data_disks | length > 0

# Verifiy the correctness of the parameters.
- name: Validate 'encryption' parameter compatibility with os_family
  assert:
    quiet: yes
    that:
      - not {{ item }}.encryption
    fail_msg: >
      You are trying to use an unsupported encryption value. FreeBSD family doesn't support encryption.
  with_items:
    - "{{ data_disks.values() | list }}"
  when:
    - data_disks is defined
    - data_disks | length > 0
    - os_family == 'FreeBSD'

# Verifiy the correctness of the parameters.
- name: Validate 'encryption' parameter
  assert:
    quiet: yes
    that:
      - "{{ item }}.encryption == True or {{ item }}.encryption == False"
    fail_msg: >
      You are trying to use an unsupported encryption value. Possible values could be 'True' or 'False'.
  with_items:
    - "{{ data_disks.values() | list }}"
  when:
    - data_disks is defined
    - data_disks | length > 0

# Check if we have a public ssh_key file
- name: "Ensure public key ssh file exists"
  stat:
    path: "{{ ssh_public_key_file }}"
  register: ssh_public_key_file_stat
  when:
    - ssh_public_key_file is defined
  delegate_to: terraform_node

# If it exists, read it, it will be deployed in the authorized_keys of
# the newly created hosts to perform the ansible tasks.
- name: "Read public key for ssh"
  set_fact:
    ssh_public_key: "{{ lookup('file', ssh_public_key_file) }}"
  when:
    - ssh_public_key_file is defined
    - ssh_public_key_file_stat.stat.exists
  delegate_to: terraform_node
