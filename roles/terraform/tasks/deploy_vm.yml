---
# tasks file for terraform
#
#

# Create the directory tree for the temprorary files.
- name: Ensures terraform dirs exists
  file:
    path: "{{ hcl_deploy_path }}/{{ inventory_hostname }}"
    state: directory
  tags: deploy, generate_hcl
  delegate_to: terraform_node

# Deploy the terraform files for each host. Use jinja2 for templating.
- name: "Deploy terraform files"
  template:
    src: terraform-vm.tf.j2
    dest: "{{ hcl_deploy_path }}/{{ inventory_hostname }}/{{ inventory_hostname }}.tf"
  register: terraform_status
  tags: deploy, generate_hcl
  delegate_to: terraform_node

- name: "Terraform destroy VMs"
  terraform:
    project_path: "{{ hcl_deploy_path }}/{{ inventory_hostname }}"
    force_init: true
    state: absent
  tags: never, destroy
  delegate_to: terraform_node

- name: "Terraform apply VMs"
  terraform:
    project_path: "{{ hcl_deploy_path }}/{{ inventory_hostname }}"
    force_init: true
    state: present
  register: terraform_output
  tags: deploy, apply
  delegate_to: terraform_node

### !!! Important
# Here we register the terraform_output that in combination with the
# output provider in the .tf file will return us the DHCP lease IP of
# the NAT network we use as management for the role.
