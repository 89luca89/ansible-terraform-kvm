---
# tasks file for terraform
#
#

- name: "Ensure public key ssh file exists"
  stat:
    path: "{{ ssh_public_key_file }}"
  register: ssh_public_key_file_stat
  when:
    - ssh_public_key_file is defined
  tags: deploy, destroy, apply, provision, generate_hcl
  delegate_to: terraform_node

- name: "Read public key for ssh"
  set_fact:
    ssh_public_key: "{{ lookup('file', '{{ ssh_public_key_file }}') }}"
  when:
    - ssh_public_key_file_stat.stat.exists
  tags: deploy, generate_hcl
  delegate_to: terraform_node

- name: "Set ansible_ssh_pass"
  set_fact:
    ansible_ssh_pass: "{% if set_new_password is defined %}{{ set_new_password }}{% else %}{{ ssh_password }}{% endif %}"
  tags: deploy, destroy, apply, provision, generate_hcl
  delegate_to: terraform_node

- name: Ensures terraform dirs exists
  file:
    path: "{{ hcl_deploy_path }}/{{ inventory_hostname }}"
    state: directory
  tags: deploy, generate_hcl
  delegate_to: terraform_node

- name: "Deploy terraform files"
  template:
    src: terraform-vm.tf.j2
    dest: "{{ hcl_deploy_path }}/{{ inventory_hostname }}/{{ inventory_hostname }}.tf"
  register: terraform_status
  tags: deploy, generate_hcl
  delegate_to: terraform_node

- name: "Terraform destroy VMs"
  terraform:
    project_path: "{{ hcl_deploy_path }}/{{ inventory_hostname }}"
    force_init: true
    state: absent
  when: terraform_status is undefined or terraform_status.changed
  tags: deploy, destroy
  delegate_to: terraform_node

- name: "Terraform apply VMs"
  terraform:
    project_path: "{{ hcl_deploy_path }}/{{ inventory_hostname }}"
    force_init: true
    state: present
  tags: deploy, apply
  delegate_to: terraform_node
