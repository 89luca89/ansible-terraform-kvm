---

# Post deploy for VMs deployed by terraform.
#
#                      -----------
#                      |  Start  |
#                      -----------
#                           |
#                  --------------------
#                  | Setup Networking |
#                  --------------------
#                           |
#    ---------------------------------------------------
#    | Switch target from ansible_host to the reported |
#    | ip returned from Terraform apply                |
#    ---------------------------------------------------
#                           |
#         -----------------------------------------
#         | Execute distro-specific network setup |
#         -----------------------------------------
#                           |
#     --------------------------------------------------
#     | Switch back ansible_host to the desired ip set |
#     |               in the inventory                 |
#     --------------------------------------------------
#                           |
#                 ---------------------
#                 | Set root password |
#                 ---------------------
#                           |
#        ---------------------------------------
#        | Execute distro-specific disks setup |
#        ---------------------------------------
#                           |
#      ------------------------------------------------
#      | Apply latest security patches to the systems |
#      ------------------------------------------------

# Also set a default password for ansible to use.
# if we have a set_new_password variable, set it to this value as
# the new hosts will have the newly setup after the deploy.
# Else default to the ssh_password mantatory value.
- name: Set ansible_ssh_pass
  set_fact:
    ansible_ssh_pass: "{% if set_new_password is defined %}{{ set_new_password }}{% else %}{{ ssh_password }}{% endif %}"

# Setup Network for the newly deployed VMs.
#
# We Will do a switcheroo between the terraform returned IP (if present)
# and setup the network as declared in the inventory for each VM
#
# We do this so we can access the new VM to setup the network, then we can
# switch back to the intended ip specified in the inventory to continue
- name: Prepare for ansible_host pivoting, save target ip...
  set_fact:
    original_ansible_host: "{{ ansible_host }}"
  tags: provision

- name: Attempt Setup Network
  block:

    # Do the switcheroo only if we have all the data declared.
    # Sometimes if we re-deploy a VM that does not change, terraform apply
    # would return 127.0.0.1 as the VM Ip erroneously, so ensure we do not
    # have that output
    - name: Pivoting ansible_host - set to terraform temporary ip...
      set_fact:
        ansible_host: "{{ terraform_output[inventory_hostname]['value'][0] }}"
      when:
        - terraform_output is defined
        - terraform_output.values() | length > 0
        - terraform_output[inventory_hostname]['value'][0] != '127.0.0.1'

    # Ansible: gather facts of the newly created hosts.
    - name: Gather facts of the newly created hosts
      setup:

    # Configure network adressing each os_family separately
    # as each system differs hugely
    - name: Configure Network
      include_tasks: "network/network_{{ os_family }}_setup.yml"

  always:

    # We ALWAYS want to return ansible_host to it's original value,
    # so this role can continue, but also other roles are not affected
    - name: Pivoting ansible_host - restoring target ip...
      set_fact:
        ansible_host: "{{ original_ansible_host }}"

    # IF ansible_host is NOT the NAT ip, then we do not need all the
    # ssh jumphost list, we can target it directly
    #
    # Else we leave the jump hosts so the ansible runner can still
    # access the VMs in private networks using the hypervisor as
    # jump host
    - name: Pivoting ansible_host - removing jump hosts...
      set_fact:
        ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
      when:
        - "item.type != 'nat'"
        - "item.ip == ansible_host"
      with_items:
        - "{{ network_interfaces.values() | list }}"

  tags: provision

- name: Wait for system to become reachable
  wait_for_connection:
    delay: 1
    timeout: 300
  tags: provision

# Ansible: gather facts of the newly created hosts.
- name: Gather facts
  setup:
  tags: provision

# Set password for newly created hosts
- name: Set Root password /1
  set_fact:
    ansible_ssh_pass: "{{ set_new_password }}"
  when: set_new_password is defined
  tags: provision

- name: Set Root password /2
  user:
    name: "root"
    update_password: always
    password: "{{ set_new_password | password_hash('sha512') }}"
  when: set_new_password is defined
  changed_when: no
  tags: provision

# Configure disks adressing each os_family separately
# as each system differs hugely
- name: Attempt Setup Disks
  block:
    - include_tasks: "storage/disk_{{ os_family }}_setup.yml"
  when: data_disks is defined
  tags: provision

...
