---

# additional disks setup for terraform role
#
#         [ Start ]
#             |
# [ Retrieve list of additional disks ]
#             |
# [ Create disk partitions ]
#             |
#     [ Format diks ]
#             |
# [ Create disk mountpoint ]
#             |
#      [ Mount disks ]
#             |
#          [ End ]

# Filter the additional virtual disks and create 1 partition
# for each disk.
# Eg. For each disk you have:
# vdb
# --vdb1
# vdc
# --vdc1
#

# Check the additional disk that have been installed.
- name: Retrieve additional disk list
  shell: |
    set -o pipefail;
    /sbin/geom disk list | \
      grep '^Geom name:' | \
      awk '{print $3}' | \
      tail -n +2
  register: additional_disks
  changed_when: no

# Filter the additional virtual disks and create 1 partition
# for each disk.
# Es. For each disk you have:
# vdb
# --vdb1
# vdc
# --vdc1
- name: Create disk partitions
  shell: |
      /sbin/gpart create -s GPT {{ item.1 }} && \
      /sbin/gpart add -t freebsd-{{ item.0['format'] }} -a 1M {{ item.1 }};
  args:
    executable: /bin/sh
    creates: "/dev/{{ item.1 }}p1"
  with_together:
    - "{{ data_disks.values() | list }}"
    - "{{ additional_disks.stdout_lines }}"

# Check if file system is already created.
# It saves a variable 'disk_fs' to check the return code
# of the command. This will be considered during the
# 'Format disks' task to decide the behaviour of the
# execution flow.
- name: Check disks file system
  shell: |
    /usr/sbin/fstyp /dev/{{ item }}p1
  args:
    executable: /bin/sh
  register: disk_fs
  ignore_errors: yes
  changed_when: no
  failed_when: no
  with_items:
    - "{{ additional_disks.stdout_lines }}"

# For each partition previously created
# the task format the unique partition with
# the filesystem type specified into the inventory,
# or with the default if not specified.
- name: Format disks
  shell: |
    /sbin/newfs -U /dev/{{ item.1 }}p1
  args:
    executable: /bin/sh
  when: disk_fs.results[item.0].rc != 0
  with_indexed_items:
    - "{{ additional_disks.stdout_lines }}"

# For each disk, create its related mount point
# if specified into the inventory.
# If not specified, the assert must exit the playbook execution.
- name: Create disks mountpoint
  file:
    path: "{{ item['mount_point'] }}"
    state: directory
    mode: 0755
  when: item['mount_point'] != "none"
  with_items:
    - "{{ data_disks.values() | list }}"

## Mount each disk on the related mountpoint,
## generating the entry into the /etc/fstab file.
- name: Mount disks
  mount:
    path: "{{ item.0['mount_point'] }}"
    src: "/dev/{{ item.1 }}p1"
    fstype: "{{ item.0['format'] }}"
    state: "{%if item.0['mount_point'] != 'none' %}mounted{%else%}present{%endif%}"
    opts: "{%if item.0['format'] != 'swap' %}rw{%else%}sw{%endif%}"
  with_together:
    - "{{ data_disks.values() | list }}"
    - "{{ additional_disks.stdout_lines }}"

- name: Retrieve swap disk list
  shell: |
    set -o pipefail;
    swapctl -l | tail -n +2 | cut -d' ' -f1
  changed_when: no
  register: swap_disks

# Swapon if we have declared any swap disk.
- name: Swapon
  command: |
    swapon /dev/{{ item.1 }}p1
  when:
    - item.0['format'] == 'swap'
    - ("/dev/" + item.1 + "p1") not in swap_disks.stdout_lines
  with_together:
    - "{{ data_disks.values() | list }}"
    - "{{ additional_disks.stdout_lines }}"

...
