---

# additional disks setup for terraform role
#
#         [ Start ]
#             |
# [ Create disk partitions ]
#     ┌───────┴─────────┐
#     |                 |
#     |           [ Copy file to remote host ]
#     |                 |
#     |           [ Create LUKS container ]
#     |                 |
# [ Format diks]  [ Format encrypted disk ]
#     |                 |
#     └───────┬─────────┘
# [ Create disk mountpoint ]
#     ┌───────┴─────────┐
#     |                 |
# [ Mount disks ] [ Mount encrypted disks ]
#     └───────┬─────────┘
#          [ End ]

# Filter the additional virtual disks and create 1 partition
# for each disk.
# Eg. For each disk you have:
# vdb
# └─vdb1
# vdc
# └─vdc1
#

- name: Add udev udev-trigger
  command: "rc-update add {{ item }}"
  register: cmd
  changed_when: 'not cmd.stdout | regex_search("skipping")'
  with_items:
    - udev
    - udev-trigger

- name: Restart udev - apply configs  # noqa 503
  command: "reboot"
  async: 1
  poll: 0
  when:
    - cmd.changed

- name: Wait for system to become reachable
  wait_for_connection:
    delay: 1
    timeout: 300

- name: Create disk partitions
  parted:
    device: "/dev/{{ item }}"
    number: 1
    state: present
  with_items:
    - "{{ ansible_devices.keys() | select('match','vd[b-z]') | list }}"

# Create directory under /root to store keyfiles that
# are going to be generated.
- name: Create directory to store keyfiles (remote)
  file:
    path: /root/keyfiles
    state: directory
    mode: '0600'
  with_together:
    - "{{ data_disks.values() | list }}"
    - "{{ ansible_devices.keys() | select('match','vd[b-z]') | sort | list }}"
  when:
    - item.0['encryption']

# Generate local directory to store keyfiles.
- name: Create directory to store keyfiles (local)
  file:
    path: "{{ hcl_deploy_path | expanduser }}/keyfiles"
    state: directory
    mode: '0755'
  delegate_to: localhost
  with_together:
    - "{{ data_disks.values() | list }}"
    - "{{ ansible_devices.keys() | select('match','vd[b-z]') | sort | list }}"
    - "{{ data_disks.keys() | list }}"
  when:
    - item.0['encryption']

# Generate keyfiles using /dev/urandom and store them
# into a local directory
- name: Generate keyfiles
  shell: |
    if [ ! -f {{ hcl_deploy_path | expanduser }}/keyfiles/{{ inventory_hostname }}-{{ item.1 }} ]; then
      dd if=/dev/urandom of={{ hcl_deploy_path | expanduser }}/keyfiles/{{ inventory_hostname }}-{{ item.1 }} bs=1024 count=1;
    fi
  register: gen_keyfile
  changed_when: '"copied" in gen_keyfile.stderr'
  delegate_to: localhost
  with_together:
    - "{{ data_disks.values() | list }}"
    - "{{ data_disks.keys() | list }}"
  when:
    - item.0['encryption']

# Copy the keyfile to the remote host, to allow
# luks utility to encrypt disks.
- name: Copy keyfile to remote host
  copy:
    src: "{{ hcl_deploy_path | expanduser }}/keyfiles/{{ inventory_hostname }}-{{ item.1 }}"
    dest: "/root/keyfiles/{{ item.1 }}"
    mode: '0400'
  with_together:
    - "{{ data_disks.values() | list }}"
    - "{{ data_disks.keys() | list }}"
  when:
    - item.0['encryption']

# For each partition create a luks container
# using the specified keyfile to encrypt it.
- name: Create LUKS container
  luks_device:
    name: "enc{{ item.1 }}1"
    device: "/dev/{{ item.1 }}1"
    state: "opened"
    keyfile: "/root/keyfiles/{{ item.2 }}"
  with_together:
    - "{{ data_disks.values() | list }}"
    - "{{ ansible_devices.keys() | select('match','vd[b-z]') | sort | list }}"
    - "{{ data_disks.keys() | list }}"
  when:
    - item.0['encryption']

# For each partition previously created
# the task format the unique partition with
# the filesystem type specified into the inventory,
# or with the default if not specified.
- name: Format disks
  filesystem:
    dev: "/dev/{{ item.1 }}1"
    fstype: "{{ item.0['format'] }}"
  with_together:
    - "{{ data_disks.values() | list }}"
    - "{{ ansible_devices.keys() | select('match','vd[b-z]') | sort | list }}"
  when:
    - not item.0['encryption']

# For each partition previously created
# the task format the unique partition with
# the filesystem type specified into the inventory,
# or with the default if not specified.
- name: Format encrypted disks
  filesystem:
    dev: "/dev/mapper/enc{{ item.1 }}1"
    fstype: "{{ item.0['format'] }}"
  with_together:
    - "{{ data_disks.values() | list }}"
    - "{{ ansible_devices.keys() | select('match','vd[b-z]') | sort | list }}"
  when:
    - item.0['encryption']

# Set the facts again after the previous tasks
# to update the informations about created disks.
# This is useful to get the newest partition UUIDs.
- name: Set Facts
  setup:
    gather_subset:
      - hardware

# For each disk, create its related mount point
# if specified into the inventory.
# If not specified, the assert must exit the playbook execution.
- name: Create disks mountpoint
  file:
    path: "{{ item['mount_point'] }}"
    state: directory
    mode: 0755
  when: item['mount_point'] != "none"
  with_items:
    - "{{ data_disks.values() | list }}"

# Mount each disk on the related mountpoint,
# generating the entry into the /etc/fstab file.
- name: Mount disks
  mount:
    path: "{{ item.0['mount_point'] }}"
    src: "UUID={{ ( ansible_devices[item.1].partitions.values() | list )[0].uuid }}"
    fstype: "{{ item.0['format'] }}"
    state: "{%if item.0['mount_point'] != 'none' %}mounted{%else%}present{%endif%}"
    opts: defaults,nofail
  with_together:
    - "{{ data_disks.values() | list }}"
    - "{{ ansible_devices.keys() | select('match','vd[b-z]') | sort | list }}"
  when:
    - not item.0['encryption']

# Mount each disk on the related mountpoint,
# generating the entry into the /etc/fstab file.
- name: Mount encrypted disks
  mount:
    path: "{{ item.0['mount_point'] }}"
    src: "/dev/mapper/enc{{ item.1 }}1"
    fstype: "{{ item.0['format'] }}"
    state: mounted
    opts: defaults,nofail
  with_together:
    - "{{ data_disks.values() | list }}"
    - "{{ ansible_devices.keys() | select('match','vd[b-z]') | sort | list }}"
  when:
    - item.0['encryption']

# For each encrypted disk, initialize its own entry
# into the /etc/crypttab file, to enable auto mount
# at boot passing its keyfile.
- name: Initialize /etc/crypttab file
  crypttab:
    name: "enc{{ item.1 }}1"
    backing_device: "/dev/{{ item.1 }}1"
    state: present
    password: "/root/keyfiles/{{ item.2 }}"
  with_together:
    - "{{ data_disks.values() | list }}"
    - "{{ ansible_devices.keys() | select('match','vd[b-z]') | sort | list }}"
    - "{{ data_disks.keys() | list }}"
  when:
    - item.0['encryption']
  no_log: yes

- name: Retrieve swap disk list
  shell: |
    set -o pipefail;
    swapon | tail -n +2 | cut -d' ' -f1
  args:
    executable: /bin/sh
  changed_when: no
  register: swap_disks

# Swapon if we have declared any swap disk.
- name: Swapon
  command: |
    swapon /dev/{{ item.1 }}1
  when:
    - item.0['format'] == 'swap'
    - ("/dev/" + item.1 + "1") not in swap_disks.stdout_lines
  with_together:
    - "{{ data_disks.values() | list }}"
    - "{{ ansible_devices.keys() | select('match','vd[b-z]') | sort | list }}"

...
